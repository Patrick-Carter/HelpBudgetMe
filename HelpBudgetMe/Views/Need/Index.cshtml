@model HelpBudgetMe.Models.ViewModels.NeedsViewModel

@{
    ViewData["Title"] = "Needs";
}


<main>
    <h2 class="dashboard_headline pagestart">Needs</h2>
    <h5 class="expenseType_amount">Budgeted For Needs: <strong>$@Model.BudgetedForNeeds</strong></h5>
    <div class="expenseType_actions">
        <a class="btn btn-action" asp-controller="Need" asp-action="AddNeed">Add</a>
        <a class="btn btn-action" asp-controller="Transfer" asp-action="Index">Transfer</a>
    </div>

    @if (Model.Needs.Count > 0)
    {
        <table>
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Amount</th>
                    <th>Date</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody id="tbody">
                @foreach (var item in Model.Needs)
                {
                    <tr>
                        <td data-heading="Name">@item.Name</td>
                        <td data-heading="Amount">$@item.Amount</td>
                        <td data-heading="Date">@item.DateCreated.ToShortDateString()</td>
                        <td data-heading="Actions">
                            <a class="table_actions" asp-controller="Need" asp-action="EditNeed" asp-route-Id="@item.Id">Edit</a>
                            <a class="danger table_actions" asp-controller="Need" asp-action="DeleteNeed" asp-route-Id="@item.Id">Delete</a>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
        <p class="loading hidden pagebottom" id="loading">Loading...</p>
        <p class="clickable_link pagebottom" id="loadmore">Load More</p>
        <p class="clickable_link pagebottom hidden" id="allLoaded">All needs loaded</p>
    }
    else
    {
        <h2 class="expenseType_none">You haven't added any needs yet.</h2>
    }
</main>
<script>
    let totalTabelItems = 10;

    const tbody = document.getElementById("tbody");
    const loadMore = document.getElementById('loadmore');
    const loading = document.getElementById('loading');
    const allLoaded = document.getElementById('allLoaded');

    let tr;
    let tdName;
    let tdAmount;
    let tdDate;
    let tdActions;
    let aEdit;
    let aDelete;
    let dateString;
    let newDate;
    let formatedDate;

    if (totalTabelItems > tbody.childElementCount) {
        loadMore.classList.add("hidden");
    } 

    loadMore.addEventListener("click", (e) => {
        e.preventDefault();

        loadMore.classList.add("hidden");
        loading.classList.remove("hidden");

        fetch('https://localhost:44357/api/GetMoreNeed', {
            method: "POST",
            body: totalTabelItems,
            headers: {
                'Content-Type': 'application/json'
            },
        })
            .then(response => response.json())
            .then(json => {

                totalTabelItems += 10;

                for (i = 0; i < json.length; i++) {

                    // convert date
                    dateString = json[i].dateCreated;
                    newDate = new Date(dateString);
                    formatedDate = (newDate.getMonth() + 1) + "/" + newDate.getDate() + "/" + newDate.getFullYear();

                    tr = document.createElement("tr");
                    tdName = document.createElement("td");
                    tdAmount = document.createElement("td");
                    tdDate = document.createElement("td");
                    tdActions = document.createElement("td");
                    aEdit = document.createElement("a");
                    aDelete = document.createElement("a");

                    aEdit.innerText = "Edit";
                    aEdit.classList.add("table_actions");
                    aEdit.href = "/need/editneed/" + json[i].id;

                    aDelete.innerText = "Delete";
                    aDelete.classList.add("table_actions");
                    aDelete.classList.add("danger");
                    aDelete.href = "/need/deleteneed/" + json[i].id;

                    // create tabel data
                    tdName.innerText = json[i].name;
                    tdAmount.innerText = "$" + json[i].amount.toFixed(2);
                    tdDate.innerText = formatedDate;
                    tdActions.append(aEdit);
                    tdActions.append(aDelete);

                    // add tabel data to table row
                    tr.append(tdName);
                    tr.append(tdAmount);
                    tr.append(tdDate);
                    tr.append(tdActions);

                    //add table row to table body
                    tbody.append(tr);
                }

                
                loading.classList.add("hidden");
                if (totalTabelItems > tbody.childElementCount) {
                    allLoaded.classList.remove("hidden");
                } else {
                    loadMore.classList.remove("hidden");
                }
            })
            .catch(err => {
                loadMore.classList.remove("hidden");
                loading.classList.add("hidden");
            });
    });
</script>
